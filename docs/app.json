[{"name": "app.py", "content": "from shiny.express import input, render, ui\nfrom shiny import reactive\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport pandas as pd\n\n#DEFINITION OF CONSTANTS\nMAX_SIMS = 1000000;\nTEST_TYPES = {\"right\": \"Eenzijdig rechts\", \"left\": \"Eenzijdig links\", \"twosided\": \"Tweezijdig\"}\n\nui.page_opts(title=\"Toetsen van hypotheses met simulaties - applet\")\n\nwith ui.sidebar(width=400):\n    ui.markdown(\"<strong>Instellingen simulatie</strong>\");\n    #USER INPUT ELEMENTS\n    ui.input_numeric(\"sampleSize\", \"Steekproefgrootte n\",value=500,min=100,max=10000);\n    ui.input_slider(\"observedProportion\", \"Geobserveerde steekproefproportie p\\u0302\", value=0.32, min=0, max=1, step=0.005);\n    ui.input_slider(\"nullHypothesis\", \"Nulhypothese p\\u2080\", value=0.3, min=0, max=1, step=0.005);\n    ui.input_numeric(\"simulationSize\", \"Aantal simulaties onder de nulhypothese\",value=10000,min=1,max=MAX_SIMS,step=1);\n    ui.input_radio_buttons(\"testType\", \"Type van de test:\", TEST_TYPES, selected=\"right\", inline=False)\n    ui.markdown(\"<strong>Visualisatie instellingen</strong>\");\n    ui.input_checkbox(\"showThreshold\", \"Toon drempelwaarde op de histogrammen\",value=False);\n    ui.input_switch(\"useProportions\", \"Gebruik proporties\",False);\n\nui.markdown(\"<strong>Resultaten simulatie</strong>\");\n\n#INTERMEDIATE ELEMENTS\n#Create a number generator with seed 1\nrng = np.random.default_rng(1);\n#Generate random data with default settings and put in reactive variable\nresults = reactive.value(rng.binomial(500, 0.3, MAX_SIMS));\n#Select subset of generated data according to default value of simulationSize and put in reactive value\nselectedResults = reactive.value(results._value[0:10000]);\n\n@reactive.effect\ndef updateData():\n  try:\n    sampleSize = int(input.sampleSize());\n    if sampleSize < 100:\n      sampleSize=100;\n  except:\n    sampleSize = 100; #Default value when sampleSize is left empty\n  nullHypothesis = input.nullHypothesis();\n  results.set(rng.binomial(sampleSize, nullHypothesis, MAX_SIMS));\n  \n@reactive.effect\ndef selectSubsetData():\n  simulationSize = input.simulationSize();\n  resultsData = results.get();\n  selectedResults.set(resultsData[0:simulationSize]);\n\n#OUTPUT ELEMENTS\n@render.plot(alt=\"A histogram\")\ndef showHistogram():\n  sampleSize = input.sampleSize();\n  if sampleSize < 100:\n      sampleSize=100;\n  observedProportion = input.observedProportion();\n  showCutoffLine = input.showThreshold();\n  nullHypothesis = input.nullHypothesis();\n\n  selectedResultsData = selectedResults.get();\n\n  binWidth = 1; #one bar for each number\n\n  #Make figure\n  fig, (ax1,ax2) = plt.subplots(1,2,figsize=(10,5));\n  bins = np.arange(0,sampleSize,binWidth);\n  N, bins, patches = ax1.hist(selectedResultsData,bins=bins,rwidth=0.75,align='left')\n\n  for i in range(0,np.size(bins)-1):\n    match input.testType():\n      case 'right':\n        if bins[i]>=observedProportion*sampleSize:\n          patches[i].set_facecolor('orange')\n      case 'left':\n        if bins[i]<=observedProportion*sampleSize:\n          patches[i].set_facecolor('orange')\n      case 'twosided':\n        distance = abs(nullHypothesis - observedProportion)\n        leftThreshold = round(sampleSize*(nullHypothesis - distance));\n        rightThreshold = round(sampleSize*(nullHypothesis + distance));\n        if not(bins[i] >= leftThreshold and bins[i]<= rightThreshold):\n          patches[i].set_facecolor('orange')\n\n  if showCutoffLine:\n    match input.testType():\n      case 'twosided':\n        ax1.vlines(leftThreshold,0,1.1*max(N),color='red',linestyles='dashed');\n        ax1.vlines(rightThreshold,0,1.1*max(N),color='red',linestyles='dashed');\n      case other:\n        ax1.vlines(observedProportion*sampleSize,0,1.1*max(N),color='red',linestyles='dashed');\n  \n  ax1.set_title('Uitgezoomd')\n  ax1.set_xlabel('Aantal successen in een enkele steekproef (X)');\n  ax1.set_xlim(0,sampleSize);\n  if (input.useProportions()):\n    ax1.xaxis.set_major_formatter(mtick.PercentFormatter(sampleSize))\n  ax1.set_ylabel('Frequentie');\n  ax1.set_ylim(0,1.1*max(N));\n\n  minimumResult = min(selectedResultsData)-10;\n  maximumResult = max(selectedResultsData)+10;\n  bins = np.arange(minimumResult,maximumResult,binWidth);\n  N, bins, patches = ax2.hist(selectedResultsData,bins=bins,rwidth=0.75,align='left');\n\n  for i in range(0,np.size(bins)-1):\n    match input.testType():\n      case 'right':\n        if bins[i]>=observedProportion*sampleSize:\n          patches[i].set_facecolor('orange')\n      case 'left':\n        if bins[i]<=observedProportion*sampleSize:\n          patches[i].set_facecolor('orange')\n      case 'twosided':\n        distance = abs(nullHypothesis - observedProportion)\n        leftThreshold = round(sampleSize*(nullHypothesis - distance));\n        rightThreshold = round(sampleSize*(nullHypothesis + distance));\n        if not(bins[i] > leftThreshold and bins[i] < rightThreshold):\n          patches[i].set_facecolor('orange')\n\n  if showCutoffLine:\n    match input.testType():\n      case 'twosided':\n        ax2.vlines(leftThreshold,0,1.1*max(N),color='red',linestyles='dashed');\n        ax2.vlines(rightThreshold,0,1.1*max(N),color='red',linestyles='dashed');\n      case other:\n        ax2.vlines(observedProportion*sampleSize,0,1.1*max(N),color='red',linestyles='dashed');\n  \n  ax2.set_title('Ingezoomd')\n  ax2.set_xlabel('Aantal successen in een enkele steekproef (X)');\n  ax2.set_xlim(minimumResult,maximumResult);\n  if (input.useProportions()):\n    ax2.xaxis.set_major_formatter(mtick.PercentFormatter(sampleSize))\n  ax2.set_ylabel('Frequentie');\n  ax2.set_ylim(0,1.1*max(N));\n\n  plt.suptitle('Histogrammen van de steekproevenverdeling');\n  return fig\n\nwith ui.card():\n  ui.card_header(\"Drempelwaarde(n)\")\n  @render.ui\n  def calculateThresholdValue():\n    sampleSize = input.sampleSize();\n    if sampleSize < 100:\n      sampleSize=100;\n    observedProportion = input.observedProportion();\n    nullHypothesis = input.nullHypothesis();\n    threshold = np.round(sampleSize*observedProportion,2);\n    if \"left\" in input.testType():\n        x = ui.p('X \\u2264' + str(threshold))\n    if \"right\" in input.testType():\n        x = ui.p('X \\u2265' + str(threshold))\n    if \"twosided\" in input.testType():\n      distance = abs(nullHypothesis - observedProportion)\n      leftThreshold = round(sampleSize*(nullHypothesis - distance));\n      rightThreshold = round(sampleSize*(nullHypothesis + distance));\n      x = ui.p('X \\u2264' + str(int(leftThreshold)) + ' of X \\u2265 ' + str(int(rightThreshold)))\n    return x\n\nwith ui.card():\n  ui.card_header(\"Empirische p-waarde\");\n  @render.ui\n  def calculateEmpiricalPvalue():\n    sampleSize = input.sampleSize();\n    if sampleSize < 100:\n      sampleSize=100;\n    simulationSize = input.simulationSize();\n    if simulationSize > MAX_SIMS:\n      simulationSize = MAX_SIMS;\n    observedProportion = input.observedProportion();\n    nullHypothesis = input.nullHypothesis();\n    selectedResultsData = selectedResults.get();\n\n    threshold = np.round(sampleSize*observedProportion,2);\n    if \"left\" in input.testType():\n        nbLargerSampleProportions = np.count_nonzero(selectedResultsData[selectedResultsData<=observedProportion*sampleSize])\n        x = ui.p(str(nbLargerSampleProportions) + '/' + str(simulationSize) + '=' + str(np.round(nbLargerSampleProportions/simulationSize,4)));\n    if \"right\" in input.testType():\n        nbLargerSampleProportions = np.count_nonzero(selectedResultsData[selectedResultsData>=observedProportion*sampleSize])\n        x = ui.p(str(nbLargerSampleProportions) + '/' + str(simulationSize) + '=' + str(np.round(nbLargerSampleProportions/simulationSize,4)));\n    if \"twosided\" in input.testType():\n      distance = abs(nullHypothesis - observedProportion)\n      leftThreshold = round(sampleSize*(nullHypothesis - distance));\n      rightThreshold = round(sampleSize*(nullHypothesis + distance));\n      nbLargerSampleProportions = np.count_nonzero(selectedResultsData[selectedResultsData>=rightThreshold])\n      nbSmallerSampleProportions = np.count_nonzero(selectedResultsData[selectedResultsData<=leftThreshold])\n      x = ui.p(str(int(nbLargerSampleProportions+nbSmallerSampleProportions)) + '/' + str(simulationSize) + '=' + str(np.round((nbSmallerSampleProportions+nbLargerSampleProportions)/simulationSize,4)));\n    return x\n  \nwith ui.accordion(id=\"acc\", open=False,):  \n  with ui.accordion_panel(\"Tabel met simulatiedata\"):  \n    @render.data_frame  \n    def showTable():\n      sampleSize = input.sampleSize();\n      if sampleSize < 100:\n        sampleSize=100;\n      nullHypothesis = input.nullHypothesis();\n      observedProportion = input.observedProportion();\n\n      my_array = np.zeros((input.simulationSize(),4));\n      my_array[0:,0] = np.arange(1,np.size(selectedResults.get())+1);\n      my_array[0:,1] = selectedResults.get();\n      my_array[0:,2] = selectedResults.get()/sampleSize;\n      if \"left\" in input.testType():\n        my_array[0:,3] = selectedResults.get()<=(observedProportion*sampleSize);\n      if \"right\" in input.testType():\n        my_array[0:,3] = selectedResults.get()>=(observedProportion*sampleSize);\n      if \"twosided\" in input.testType():\n        distance = abs(nullHypothesis - observedProportion)\n        leftThreshold = round(sampleSize*(nullHypothesis - distance));\n        rightThreshold = round(sampleSize*(nullHypothesis + distance));\n        my_array[0:,3] = np.logical_or(selectedResults.get() <= leftThreshold, selectedResults.get() >= rightThreshold)\n\n      df = pd.DataFrame(my_array, columns=['Simulatie nummer','# successen','Proportie','Drempelwaarde overschreden?'])\n      return render.DataGrid(df)", "type": "text"}]